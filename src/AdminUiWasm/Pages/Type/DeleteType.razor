@page "/DeleteType/{DeleteId}"

@using AdminUiWasm.CatalogApi

@inject HttpClient Http
@inject CatalogApi.catalog_apiClient client

@inject NavigationManager NavigationManager


<div>
	<div class="modal-header">
		<h4 class="modal-title">Confirm delete</h4>
		<button type="button" class="close" data-dismiss="modal">&times;</button>
	</div>

	<div class="modal-body">
		<input type="hidden" id="bookToDeleteField" />
		Are you sure you want to delete @type.Type <span id="bookTitleField"></span>?
	</div>

	<div class="modal-footer">
		<button type="button" class="btn" data-dismiss="modal" @onclick="Cancel">Cancel</button>
		<button type="button" class="btn btn-danger" @onclick="Delete">Delete</button>
	</div>

</div>

@code {

	private IEnumerable<CatalogItem> catalogItems;
	CatalogType type = new CatalogType();
	CatalogItem item = new CatalogItem();

	[Parameter]
	public string DeleteId { get; set; }

	protected override async Task OnInitializedAsync()
	{
		DeleteId = DeleteId ?? "0";
		type = await client.GetCatalogTypeByIdAsync(Convert.ToInt32(DeleteId));
		catalogItems = await client.GetCatalogItemsByCatalogTypeIdAsync(Convert.ToInt32(DeleteId));
	}

	private void Cancel()
	{
		NavigationManager.NavigateTo("");
	}

	private async Task Delete()
	{
		type.Id = Convert.ToInt32(DeleteId);

		foreach (var item in catalogItems)
		{
			
			this.item.Id = item.Id;
			this.item.Name = item.Name;
			this.item.Description = item.Description;
			this.item.Price = item.Price;
			this.item.CatalogTypeId = item.CatalogTypeId;
			this.item.PictureUri = item.PictureUri;

			await client.DeleteCatalogItemByIdAsync(this.item.Id);
		}

		await client.DeleteCatalogTypeByIdAsync(type.Id);

		NavigationManager.NavigateTo("");

	}

}
