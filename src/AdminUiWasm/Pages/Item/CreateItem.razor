@page "/CreateItem"
@using AdminUiWasm.CatalogApi

@inject HttpClient Http
@inject CatalogApi.catalog_apiClient client

@inject NavigationManager NavigationManager

@if (catalogTypes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h3>Create item</h3>
    <br />

    <EditForm Model="@item" OnValidSubmit="Item">
        <div class="form-group">
            <label for="productName">Product Name</label>
            <InputText id="productName" @bind-Value="item.Name" class="form-control" />
        </div>

        <div class="form-group">
            <label for="description">Description</label>
            <InputText id="description" @bind-Value="item.Description" class="form-control" />
        </div>

        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" @bind-Value="item.Price" class="form-control" />
        </div>

        <div class="form-group">
            <label for="catalogTypeId">Type id</label>
            <InputSelect id="catalogTypeId" @bind-Value="item.CatalogTypeId" class="form-control">
                @foreach (var type in catalogTypes)
                    {
                    <option value="@type.Id">@type.Type</option>
                    }
            </InputSelect>
        </div>

        <button type="submit" class="btn btn-primary" @onclick="ItemCreate">Create item</button>
    </EditForm>
}

@code {
    CatalogItem item = new CatalogItem();

    private IEnumerable<CatalogItem> catalogItems;
    private IEnumerable<CatalogType> catalogTypes;

    protected override async Task OnInitializedAsync()
    {
        catalogTypes = await client.GetAllCatalogTypesAsync();

    }

    private void Item()
    {
        NavigationManager.NavigateTo("/fetchdata");
    }

    private async Task ItemCreate()
    {
        await client.CreateCatalogItemAsync(item);
        StateHasChanged();
    }
}
