@page "/CreateItem"
@using AdminUiWasm.CatalogApi
@using Tewr.Blazor.FileReader
@using System.IO

@inject HttpClient Http
@inject CatalogApi.catalog_apiClient client

@inject NavigationManager NavigationManager
@inject IFileReaderService FileReader

@if (catalogTypes == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<h3>Create item</h3>
	<br />

	<EditForm Model="@item" OnValidSubmit="Item">

		<div class="form-group">
			<label for="picture">Picture</label>
			<InputFile id="picture" @bind-Value="item.PictureUri" class="form-control" @ref="inputReference" OnChange=" () => SelectFile()" />
		</div>

		<div class="form-group">
			<label for="productName">Product Name</label>
			<InputText id="productName" @bind-Value="item.Name" class="form-control" />
		</div>

		<div class="form-group">
			<label for="description">Description</label>
			<InputText id="description" @bind-Value="item.Description" class="form-control" />
			@if (imagePath != null)
			{
				<label>File name: @fileName</label>
				<br />
				<img style="width: 100px" src="" />
			}

		</div>

		<div class="form-group">
			<label for="price">Price</label>
			<InputNumber id="price" @bind-Value="item.Price" class="form-control" />
		</div>

		<div class="form-group">
			<label for="catalogTypeId">Type id</label>
			<InputSelect id="catalogTypeId" @bind-Value="item.CatalogTypeId" class="form-control">
				@foreach (var type in catalogTypes)
					{
					<option value="@type.Id">@type.Type</option>
					}
			</InputSelect>
		</div>

		<button type="submit" class="btn btn-primary" @onclick="ItemCreate">Create item</button>
	</EditForm>
}

@code {
	CatalogItem item = new CatalogItem();

	private IEnumerable<CatalogItem> catalogItems;
	private IEnumerable<CatalogType> catalogTypes;

	ElementReference inputReference;
	string imagePath = null;
	string fileName = string.Empty;

	Stream fileStream = null;

	protected override async Task OnInitializedAsync()
	{
		catalogTypes = await client.GetAllCatalogTypesAsync();

	}

	private void Item()
	{
		StateHasChanged();
		NavigationManager.NavigateTo("/fetchdata");
	}

	private async Task ItemCreate()
	{
		await client.CreateCatalogItemAsync(item);
		StateHasChanged();
	}

	private async Task SelectFile()
	{
		var file = (await FileReader.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();

		if (file == null)
			return;
		var fileinfo = await file.ReadFileInfoAsync();
		fileName = fileinfo.Name;

		using (var memory = await file.CreateMemoryStreamAsync((int)fileinfo.Size))
		{
			fileStream = memory;
		}
	}
}
