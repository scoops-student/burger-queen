@page "/UpdateItem/{id}"

@using AdminUiWasm.CatalogApi
@using Tewr.Blazor.FileReader
@using System.IO

@using System.Net.Http.Headers


@inject HttpClient Http
@inject CatalogApi.catalog_apiClient client

@inject NavigationManager NavigationManager
@inject IFileReaderService FileReader

@if (catalogTypes == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<h3>Update Item</h3>
	<br />
	<br />
	<br />
	<div class="form-group">
		<label for="picture">Picture</label>
		<input type="file" id="picture" @ref="inputReference" @onchange="SelectFile" />
		<br/>
		<button class="btn btn-primary" @onclick="UploadFile" bind="item.PictureUri">Upload Picture</button>
		@if (!string.IsNullOrWhiteSpace(message))
		{
			<br />
			<div class="alert alert-success"> File has been uploaded</div>
		}
		else
		{
			<br />
			<div class="alert alert-warning"> File has not been uploaded</div>
		}
		@if (imagePath != null)
		{
			<br />
			<label>File name: @fileName</label>
			<br />
			<img style="width: 100px" src="@imagePath" />
		}

	</div>

	<EditForm Model="@item" OnValidSubmit="ItemUpdate">

		<div class="form-group">
			<label for="itemId">Item Id</label>
			<InputText id="itemId" @bind-Value="@Id" class="form-control" />
		</div>

		<div class="form-group">
			<label for="productName">Product Name</label>
			<InputText id="productName" @bind-Value="item.Name" class="form-control" />
		</div>

		<div class="form-group">
			<label for="description">Description</label>
			<InputText id="description" @bind-Value="item.Description" class="form-control" />
		</div>

		<div class="form-group">
			<label for="price">Price</label>
			<InputNumber id="price" @bind-Value="item.Price" class="form-control" />
		</div>

		<div class="form-group">
			<label for="catalogTypeId">Type id</label>
			<InputSelect id="catalogTypeId" @bind-Value="item.CatalogTypeId" class="form-control">
				@foreach (var type in catalogTypes)
					{
					<option value="@type.Id">@type.Type</option>
					}
			</InputSelect>
		</div>

		<button type="submit" class="btn btn-primary" @onclick="ItemUpdate">Update</button>

	</EditForm>
}

@code {
	CatalogItem item = new CatalogItem();

	private IEnumerable<CatalogType> catalogTypes;


	ElementReference inputReference;
	string imagePath = null;
	string fileName = string.Empty;
	string message = string.Empty;

	Stream fileStream = null;

	[Parameter]
	public string Id { get; set; }

	protected override async Task OnInitializedAsync()
	{
		catalogTypes = await client.GetAllCatalogTypesAsync();

		Id = Id ?? "0";
		CatalogItem Item = await client.GetCatalogItemByIdAsync(Convert.ToInt32(Id));
		item.Name = Item.Name;
		item.Description = Item.Description;
		item.Price = Item.Price;
		item.CatalogTypeId = Item.CatalogTypeId;
		item.PictureUri = Item.PictureUri;
	}

	private async Task ItemUpdate()
	{
		item.Id = Convert.ToInt32(Id);
		await client.UpdateCatalogItemAsync(item);
		NavigationManager.NavigateTo("/fetchdata");
	}

	private async Task SelectFile()
	{
		var file = (await FileReader.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();

		if (file == null)
			return;
		var fileinfo = await file.ReadFileInfoAsync();
		fileName = fileinfo.Name;

		using (var memory = await file.CreateMemoryStreamAsync((int)fileinfo.Size))
		{
			fileStream = new MemoryStream(memory.ToArray());
		}
	}

	private async Task UploadFile()
	{
		var content = new MultipartFormDataContent();
		content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");

		content.Add(new StreamContent(fileStream, (int)fileStream.Length), "Image", fileName);

		string url = "https://localhost:5001";

		var response = await Http.PostAsync($"{url}/Catalog", content);

		if (response.IsSuccessStatusCode)
		{
			var uploadedfile = await response.Content.ReadAsStringAsync();
			var file = uploadedfile.Trim('"');
			imagePath = $"{url}/{file}";
			item.PictureUri = imagePath;
			message = "File has been uploaded succesfully";
		}
	}

}

