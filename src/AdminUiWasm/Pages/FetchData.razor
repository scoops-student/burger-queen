@page "/fetchdata"
@using AdminUiWasm.CatalogApi

@inject HttpClient Http

@inject catalog_apiClient client

@inject NavigationManager NavigationManager

@if (catalogTypes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>Burger Queen</h1>

    <p>This is what we have, take a look and enjoy!!</p>
        
        <ul style="list-style : none">
            @foreach (var type in catalogTypes)
            {
                
	                <li style="font-size: 25px">@type.Type</li>
                    <button type="submit" class="btn btn-primary" @onclick="()=>UpdateType(type.Id)">Update</button>
                    <button type="submit" class="btn btn-primary" @onclick="()=>DeleteType(type.Id)">Delete</button>
                    <br />

                        <ul style="list-style : none">                      
                        @if (catalogItems == null)
                            {
                                <p><em>Loading...</em></p>
                            }
                            else
                            {
                                @foreach (var item in catalogItems)
                                {
                                    if (item.CatalogTypeId == type.Id)
                                    {
                                            <img width="100" src="@item.PictureUri"/>
                                            <li style="font-size: 15px"><b>@item.Name</b> </li>
                                            <li style="font-size: 15px">@item.Description</li>
                                            <li style="font-size: 15px">€ @item.Price</li>
                                            <button type="submit" class="btn btn-primary" @onclick="()=>UpdateItem(item.Id)">Update</button>
                                            <button type="submit" class="btn btn-primary" @onclick="()=>DeleteItem(item.Id)">Delete</button>
                                        <br />
                                    }
                                }
                            <br />
                            }
                    </ul>
            }
        </ul>
}

@code {
    CatalogType type = new CatalogType();
    CatalogItem item = new CatalogItem();

    private IEnumerable<CatalogApi.CatalogType> catalogTypes;
    private IEnumerable<CatalogApi.CatalogItem> catalogItems;

    protected override async Task OnInitializedAsync()
    {
        catalogTypes = await client.GetAllCatalogTypesAsync();
        catalogItems = await client.GetAllCatalogItemsAsync();
    }

    private void CreateType()
    {
        NavigationManager.NavigateTo("/CreateType");
    }

    private async Task UpdateType(int id)
    {
        type = await client.GetCatalogTypeByIdAsync(id);
        NavigationManager.NavigateTo($"/UpdateType/{type.Id}");
    }

    private async Task DeleteType(int id)
    {
        type = await client.GetCatalogTypeByIdAsync(id);
        NavigationManager.NavigateTo($"/DeleteType/{type.Id}");
    }

    private void CreateItem()
    {
        NavigationManager.NavigateTo("/CreateItem");
    }

    private async Task UpdateItem(int id)
    {
        item = await client.GetCatalogItemByIdAsync(id);
        NavigationManager.NavigateTo($"/UpdateItem/{item.Id}");
    }

    private async Task DeleteItem(int id)
    {
        item = await client.GetCatalogItemByIdAsync(id);
        NavigationManager.NavigateTo($"/DeleteItem/{item.Id}");
    }
}
