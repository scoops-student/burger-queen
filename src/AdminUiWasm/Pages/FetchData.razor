@page "/fetchdata"
@using AdminUiWasm.CatalogApi

@inject HttpClient Http

@inject catalog_apiClient client

@inject NavigationManager NavigationManager

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (catalogTypes == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<table class="table table-striped">
		<thead>
			<tr>
				<th>Id</th>
				<th>Type</th>

				<th><button type="submit" class="btn btn-primary" @onclick="CreateType">Create</button></th>

			</tr>
		</thead>
		<tbody>
			@foreach (var type in catalogTypes)
			{
				<tr>
					<td>@type.Id</td>
					<td>@type.Type</td>

					<td><button type="submit" class="btn btn-primary" @onclick="()=>UpdateType(type.Id)">Update</button></td>

					<td><button type="submit" class="btn btn-primary" @onclick="DeleteType">Delete</button></td>
					<br />

					<table>
						<thead>
							<tr>
								<th>Id</th>
								<th>Item</th>
								<th>Description</th>
								<th>Price</th>

								<th><button type="submit" class="btn btn-primary" @onclick="CreateItem">Create</button></th>

							</tr>
						</thead>
						<tbody>
							@if (catalogItems == null)
							{
								<p><em>Loading...</em></p>
							}
							else
							{
								@foreach (var item in catalogItems)
								{
									if (item.CatalogTypeId == type.Id)
									{
										<tr>
											<td>@item.Id</td>
											<td>@item.Name</td>
											<td>@item.Description</td>
											<t>€@item.Price</t>
											<td><button type="submit" class="btn btn-primary" @onclick="()=>UpdateItem(item.Id)">Update</button></td>
											<td><button type="submit" class="btn btn-primary" @onclick="DeleteItem">Delete</button></td>

										</tr>
										<br />
									}
								}
							}

						</tbody>
					</table>
				</tr>
			}
		</tbody>
	</table>
}

@code {

	CatalogType type = new CatalogType();
	CatalogItem item = new CatalogItem();

	private IEnumerable<CatalogType> catalogTypes;
	private IEnumerable<CatalogItem> catalogItems;


	protected override async Task OnInitializedAsync()
	{
		catalogTypes = await client.GetAllCatalogTypesAsync();
		catalogItems = await client.GetAllCatalogItemsAsync();
	}

	private void CreateType()
	{
		NavigationManager.NavigateTo("/CreateTypeItem");

	}

	private async Task UpdateType(int id)
	{
		type = await client.GetCatalogTypeByIdAsync(id);
		NavigationManager.NavigateTo($"/UpdateType/{type.Id}");
	}

	private async Task DeleteType()
	{
		var deletetype = client.GetCatalogTypeByIdAsync(type.Id);
		//await client.DeleteCatalogTypeByIdAsync();
		NavigationManager.NavigateTo("/CreateTypeItem");
	}

	private void CreateItem()
	{
		NavigationManager.NavigateTo("/CreateTypeItem");

	}

	private async Task UpdateItem(int id)
	{

		item = await client.GetCatalogItemByIdAsync(id);
		NavigationManager.NavigateTo($"/UpdateItem/{item.Id}");
	}

	private async Task DeleteItem()
	{
		//int id = await client.GetCatalogItemByIdAsync(item.id);
		//await client.DeleteCatalogItemByIdAsync(id);
		NavigationManager.NavigateTo("");
	}
}
